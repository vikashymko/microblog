{"ast":null,"code":"import { API_BASE_URL } from \"./config\";\nimport { getAuthHeader } from \"./auth\";\nexport const fetchUserPosts = async (username, credentials = null) => {\n  const headers = credentials ? getAuthHeader(credentials) : {};\n  const response = await fetch(`${API_BASE_URL}/users/${username}/posts`, {\n    headers\n  });\n  if (!response.ok) throw new Error(\"Failed to fetch posts\");\n  return response.json();\n};\nexport const createPost = async (username, content, credentials) => {\n  const response = await fetch(`${API_BASE_URL}/users/${username}/posts`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      ...getAuthHeader(credentials)\n    },\n    body: JSON.stringify({\n      content\n    })\n  });\n  if (!response.ok) throw new Error(\"Failed to create post\");\n  return response.json();\n};\nexport const togglePostLike = async (username, postId, isLiked, credentials) => {\n  const method = isLiked ? \"DELETE\" : \"PUT\";\n  const response = await fetch(`${API_BASE_URL}/users/${username}/posts/${postId}/like`, {\n    method,\n    headers: getAuthHeader(credentials)\n  });\n  if (!response.ok) throw new Error(\"Failed to toggle like\");\n};","map":{"version":3,"names":["API_BASE_URL","getAuthHeader","fetchUserPosts","username","credentials","headers","response","fetch","ok","Error","json","createPost","content","method","body","JSON","stringify","togglePostLike","postId","isLiked"],"sources":["D:/Папка/Users/Administrator/Desktop/V семестр/Front-end/MKR/MKRL/client/src/api/posts.js"],"sourcesContent":["import { API_BASE_URL } from \"./config\";\r\nimport { getAuthHeader } from \"./auth\";\r\n\r\nexport const fetchUserPosts = async (username, credentials = null) => {\r\n  const headers = credentials ? getAuthHeader(credentials) : {};\r\n  const response = await fetch(`${API_BASE_URL}/users/${username}/posts`, {\r\n    headers,\r\n  });\r\n  if (!response.ok) throw new Error(\"Failed to fetch posts\");\r\n  return response.json();\r\n};\r\n\r\nexport const createPost = async (username, content, credentials) => {\r\n  const response = await fetch(`${API_BASE_URL}/users/${username}/posts`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      ...getAuthHeader(credentials),\r\n    },\r\n    body: JSON.stringify({ content }),\r\n  });\r\n  if (!response.ok) throw new Error(\"Failed to create post\");\r\n  return response.json();\r\n};\r\n\r\nexport const togglePostLike = async (\r\n  username,\r\n  postId,\r\n  isLiked,\r\n  credentials\r\n) => {\r\n  const method = isLiked ? \"DELETE\" : \"PUT\";\r\n  const response = await fetch(\r\n    `${API_BASE_URL}/users/${username}/posts/${postId}/like`,\r\n    {\r\n      method,\r\n      headers: getAuthHeader(credentials),\r\n    }\r\n  );\r\n  if (!response.ok) throw new Error(\"Failed to toggle like\");\r\n};\r\n"],"mappings":"AAAA,SAASA,YAAY,QAAQ,UAAU;AACvC,SAASC,aAAa,QAAQ,QAAQ;AAEtC,OAAO,MAAMC,cAAc,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,WAAW,GAAG,IAAI,KAAK;EACpE,MAAMC,OAAO,GAAGD,WAAW,GAAGH,aAAa,CAACG,WAAW,CAAC,GAAG,CAAC,CAAC;EAC7D,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGP,YAAY,UAAUG,QAAQ,QAAQ,EAAE;IACtEE;EACF,CAAC,CAAC;EACF,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;EAC1D,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;AACxB,CAAC;AAED,OAAO,MAAMC,UAAU,GAAG,MAAAA,CAAOR,QAAQ,EAAES,OAAO,EAAER,WAAW,KAAK;EAClE,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGP,YAAY,UAAUG,QAAQ,QAAQ,EAAE;IACtEU,MAAM,EAAE,MAAM;IACdR,OAAO,EAAE;MACP,cAAc,EAAE,kBAAkB;MAClC,GAAGJ,aAAa,CAACG,WAAW;IAC9B,CAAC;IACDU,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEJ;IAAQ,CAAC;EAClC,CAAC,CAAC;EACF,IAAI,CAACN,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;EAC1D,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;AACxB,CAAC;AAED,OAAO,MAAMO,cAAc,GAAG,MAAAA,CAC5Bd,QAAQ,EACRe,MAAM,EACNC,OAAO,EACPf,WAAW,KACR;EACH,MAAMS,MAAM,GAAGM,OAAO,GAAG,QAAQ,GAAG,KAAK;EACzC,MAAMb,QAAQ,GAAG,MAAMC,KAAK,CAC1B,GAAGP,YAAY,UAAUG,QAAQ,UAAUe,MAAM,OAAO,EACxD;IACEL,MAAM;IACNR,OAAO,EAAEJ,aAAa,CAACG,WAAW;EACpC,CACF,CAAC;EACD,IAAI,CAACE,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;AAC5D,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}