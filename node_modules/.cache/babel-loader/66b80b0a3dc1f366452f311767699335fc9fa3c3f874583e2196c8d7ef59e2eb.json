{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u041F\\u0430\\u043F\\u043A\\u0430\\\\Users\\\\Administrator\\\\Desktop\\\\V \\u0441\\u0435\\u043C\\u0435\\u0441\\u0442\\u0440\\\\Front-end\\\\MKR\\\\MKRL\\\\microblog\\\\src\\\\pages\\\\PostsPage.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { useAuth } from \"../hooks/UseAuth\";\nimport styled from \"styled-components\";\nimport { useState, useEffect } from \"react\";\nimport { API_BASE_URL } from \"../api/config\";\nimport Post from \"../components/posts/Post\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PageContainer = styled.div`\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 20px;\n`;\n_c = PageContainer;\nconst PostsGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  gap: 20px;\n  width: 100%;\n`;\n_c2 = PostsGrid;\nconst PostsPage = () => {\n  _s();\n  const [posts, setPosts] = useState([]);\n  const {\n    credentials\n  } = useAuth();\n  const handleLikeToggle = postId => {\n    setPosts(posts.map(post => {\n      if (post.id === postId) {\n        return {\n          ...post,\n          is_liked: !post.is_liked,\n          likes: post.is_liked ? post.likes - 1 : post.likes + 1\n        };\n      }\n      return post;\n    }));\n  };\n  useEffect(() => {\n    const fetchAllPosts = async () => {\n      try {\n        const testUsers = [\"user_1\", \"user_2\", \"user_3\"];\n        const allPosts = await Promise.all(testUsers.map(async username => {\n          try {\n            const response = await fetch(`${API_BASE_URL}/users/${username}/posts`, {\n              headers: credentials ? {\n                Authorization: `Basic ${btoa(`${credentials.username}:${credentials.password}`)}`\n              } : {}\n            });\n            if (!response.ok) return [];\n            return response.json();\n          } catch (err) {\n            console.error(`Failed to fetch posts for ${username}:`, err);\n            return [];\n          }\n        }));\n        const combinedPosts = allPosts.flat().sort((a, b) => new Date(b.created_at) - new Date(a.created_at));\n        setPosts(combinedPosts);\n      } catch (error) {\n        console.error(\"Failed to fetch posts:\", error);\n      }\n    };\n    fetchAllPosts();\n  }, [credentials]);\n  return /*#__PURE__*/_jsxDEV(PageContainer, {\n    children: /*#__PURE__*/_jsxDEV(PostsGrid, {\n      children: posts.map(post => /*#__PURE__*/_jsxDEV(Post, {\n        post: post,\n        onLikeToggle: handleLikeToggle\n      }, post.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n};\n_s(PostsPage, \"905Q72lzwOVDrX2v69078eXXe8U=\", false, function () {\n  return [useAuth];\n});\n_c3 = PostsPage;\nexport default PostsPage;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"PageContainer\");\n$RefreshReg$(_c2, \"PostsGrid\");\n$RefreshReg$(_c3, \"PostsPage\");","map":{"version":3,"names":["React","useAuth","styled","useState","useEffect","API_BASE_URL","Post","jsxDEV","_jsxDEV","PageContainer","div","_c","PostsGrid","_c2","PostsPage","_s","posts","setPosts","credentials","handleLikeToggle","postId","map","post","id","is_liked","likes","fetchAllPosts","testUsers","allPosts","Promise","all","username","response","fetch","headers","Authorization","btoa","password","ok","json","err","console","error","combinedPosts","flat","sort","a","b","Date","created_at","children","onLikeToggle","fileName","_jsxFileName","lineNumber","columnNumber","_c3","$RefreshReg$"],"sources":["D:/Папка/Users/Administrator/Desktop/V семестр/Front-end/MKR/MKRL/microblog/src/pages/PostsPage.js"],"sourcesContent":["import React from \"react\";\r\nimport { useAuth } from \"../hooks/UseAuth\";\r\nimport styled from \"styled-components\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { API_BASE_URL } from \"../api/config\";\r\nimport Post from \"../components/posts/Post\";\r\nconst PageContainer = styled.div`\r\n  max-width: 1200px;\r\n  margin: 0 auto;\r\n  padding: 20px;\r\n`;\r\n\r\nconst PostsGrid = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(3, 1fr);\r\n  gap: 20px;\r\n  width: 100%;\r\n`;\r\n\r\nconst PostsPage = () => {\r\n  const [posts, setPosts] = useState([]);\r\n  const { credentials } = useAuth();\r\n  const handleLikeToggle = (postId) => {\r\n    setPosts(\r\n      posts.map((post) => {\r\n        if (post.id === postId) {\r\n          return {\r\n            ...post,\r\n            is_liked: !post.is_liked,\r\n            likes: post.is_liked ? post.likes - 1 : post.likes + 1,\r\n          };\r\n        }\r\n        return post;\r\n      })\r\n    );\r\n  };\r\n  useEffect(() => {\r\n    const fetchAllPosts = async () => {\r\n      try {\r\n        const testUsers = [\"user_1\", \"user_2\", \"user_3\"];\r\n\r\n        const allPosts = await Promise.all(\r\n          testUsers.map(async (username) => {\r\n            try {\r\n              const response = await fetch(\r\n                `${API_BASE_URL}/users/${username}/posts`,\r\n                {\r\n                  headers: credentials\r\n                    ? {\r\n                        Authorization: `Basic ${btoa(\r\n                          `${credentials.username}:${credentials.password}`\r\n                        )}`,\r\n                      }\r\n                    : {},\r\n                }\r\n              );\r\n              if (!response.ok) return [];\r\n              return response.json();\r\n            } catch (err) {\r\n              console.error(`Failed to fetch posts for ${username}:`, err);\r\n              return [];\r\n            }\r\n          })\r\n        );\r\n\r\n        const combinedPosts = allPosts\r\n          .flat()\r\n          .sort((a, b) => new Date(b.created_at) - new Date(a.created_at));\r\n\r\n        setPosts(combinedPosts);\r\n      } catch (error) {\r\n        console.error(\"Failed to fetch posts:\", error);\r\n      }\r\n    };\r\n\r\n    fetchAllPosts();\r\n  }, [credentials]);\r\n\r\n  return (\r\n    <PageContainer>\r\n      <PostsGrid>\r\n        {posts.map((post) => (\r\n          <Post key={post.id} post={post} onLikeToggle={handleLikeToggle} />\r\n        ))}\r\n      </PostsGrid>\r\n    </PageContainer>\r\n  );\r\n};\r\nexport default PostsPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}